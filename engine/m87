#!/bin/env python3

"""M87

Usage:
    m87
    m87 (-h | --help | --version)
"""

import time
from constants import COLOR
from board import Board, toUCI
from search import search
import perft

NAME = "M87"
VERSION = "{} 0.4.0".format(NAME)
AUTHOR = "nrobinaubertin"
CURRENT_BOARD = Board("startpos")


def bestMove(board, max_time=0, max_depth=0):
    if max_time != 0:
        start_time = time.process_time()
        for i in range(max_depth + 1):
            best = search(board, i)
            used_time = (time.process_time_ns() - start_time) // 1e6
            if used_time > max_time // 40:
                return toUCI(best.move)
            else:
                print(
                    ""
                    + f"info depth {best.depth} "
                    + f"score cp {best.score} "
                    + f"time {int(best.time // 1e9)} "
                    + f"nodes {best.nodes} "
                    + (
                        "nps " + str(int(best.nodes * 1e9 // max(0.0001, best.time))) + " "
                        if best.time > 0
                        else ""
                    )
                    + f"currmove {toUCI(best.move)}"
                )
    else:
        start_time = time.process_time()
        for i in range(max_depth + 1):
            best = search(board, i)
            print(
                ""
                + f"info depth {best.depth} "
                + f"score cp {best.score} "
                + f"time {int(best.time // 1e9)} "
                + f"nodes {best.nodes} "
                + (
                    "nps " + str(int(best.nodes * 1e9 // max(0.0001, best.time))) + " "
                    if best.time > 0
                    else ""
                )
                + f"currmove {toUCI(best.move)}"
            )
    return toUCI(best.move)


def uci_parser(line):
    global CURRENT_BOARD
    tokens = line.strip().split()

    if not tokens:
        return []

    if len(tokens) == 1 and tokens[0] == "print":
        return [str(CURRENT_BOARD)]

    if len(tokens) == 1 and tokens[0] == "uci":
        return [
            "{} by {}".format(VERSION, AUTHOR),
            "id name {}".format(NAME),
            "id author {}".format(AUTHOR),
            # fake some options
            "option name Hash type spin default 16 min 1 max 33554432",
            "option name Move Overhead type spin default 10 min 0 max 5000",
            "option name Threads type spin default 1 min 1 max 1",
            "uciok",
        ]

    if tokens[0] == "ucinewgame":
        return []

    if tokens[0] == "isready":
        return [
            "readyok",
        ]

    if len(tokens) > 1 and tokens[0] == "position":
        if tokens[1] == "startpos":
            fen = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1"
            next_token = 2
        else:
            fen = "{0} {1} {2} {3} {4} {5}".format(
                tokens[1],
                tokens[2],
                tokens[3],
                tokens[4],
                tokens[5] if len(tokens) > 5 else 0,
                tokens[6] if len(tokens) > 6 else 0,
            )
            next_token = 7
        board = Board(fen)
        if len(tokens) > next_token and tokens[next_token] == "moves":
            for move in tokens[next_token + 1 :]:
                board.push(board.fromUCI(move))
        CURRENT_BOARD = board

    if len(tokens) > 1 and tokens[0] == "perft":
        depth = int(tokens[1])
        if depth == 0:
            nodes = 1
        else:
            nodes = perft.perft(CURRENT_BOARD, depth)
        return [f"nodes {nodes}"]

    if len(tokens) > 1 and tokens[0] == "go":

        depth = None

        if len(tokens) > 8:
            if tokens[1] == "wtime":
                wtime = int(tokens[2])
            if tokens[3] == "btime":
                btime = int(tokens[4])
            if tokens[5] == "winc":
                winc = int(tokens[6])
            if tokens[7] == "binc":
                binc = int(tokens[8])

        if tokens[1] == "movetime":
            wtime = int(tokens[2])
            btime = int(tokens[2])
            winc = 0
            binc = 0

        if tokens[1] == "depth":
            depth = int(tokens[2])

        if depth is None:
            my_time = wtime + winc
            if CURRENT_BOARD.turn == COLOR.BLACK:
                my_time = btime + binc
            move = bestMove(CURRENT_BOARD, max_time=my_time)
        else:
            move = bestMove(CURRENT_BOARD, max_depth=depth)

        return [f"bestmove {move}"]
    return []


if __name__ == "__main__":
    while True:
        line = input()
        for line in uci_parser(line):
            print(line)
